import java.io.PrintStream;
import java.io.IOException;
import java.util.Random;
import java.util.List;
import java.util.Vector;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.FSDataInputStream;
import org.apache.hadoop.fs.FSDataOutputStream;
import org.apache.hadoop.fs.FileStatus;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;
import edu.cornell.cs.blog.JNIBlog;
import java.nio.ByteBuffer;

public class FileTester extends Configured implements Tool {
  public static void main(String[] args){
    int res;
    try{
      res = ToolRunner.run(new Configuration(), new FileTester(), args);
      System.exit(res);
    }catch(Exception e){
      System.out.println(e);
      e.printStackTrace();
    }
  }
  
  void overwriteFile(FileSystem fs, String path, String... args)
  throws Exception{
    if(args.length != 2){
      throw new IOException("Please specify the pos and data");
    }
    FSDataOutputStream fsos = fs.append(new Path(path));
    fsos.seek(Long.parseLong(args[0]));
    System.out.println("seek done");
    PrintStream ps = new PrintStream(fsos);
    ps.print(args[1]);
    System.out.println("write done");
    ps.close();
    fsos.close();
    System.out.println("close done");
  }

  void appendFile(FileSystem fs, String path, String... args)
  throws IOException{
    if(args.length != 1){
      throw new IOException("Please specify the data");
    }
    FSDataOutputStream fsos = fs.append(new Path(path));
    PrintStream ps = new PrintStream(fsos);
    ps.print(args[0]);
    ps.close();
    fsos.close();
  }

  void write1g(FileSystem fs, String path, int bfsz)
  throws IOException{
    FSDataOutputStream fsos = fs.create(new Path(path));
    byte [] buf = new byte[bfsz];
    int i;
    for(i=0;i<bfsz;i++)buf[i]=(byte)'a';
    for(i=0;i<((1<<30)/bfsz);i++)
      fsos.write(buf,0,bfsz);
    fsos.close();
  }

  // Note: please set the block size to 1MB
  void randomWrite(FileSystem fs, String path)
  throws IOException{
    Path p = new Path(path);
    byte [] buf = new byte[4096];
    int i;
    // 0) Initialize write 4KB for 1024 times.
    for(i=0;i<4096;i++)buf[i]='I';
    FSDataOutputStream fsos = fs.create(new Path(path));
    for(i=0;i<1024;i++)fsos.write(buf,0,4096);
//    fsos.close();
    // 1) write 4K at 0; 4K at 1044480; 4K at 100000
    for(i=0;i<4096;i++)buf[i]='1';
    fsos.seek(0);fsos.write(buf,0,4096);
    fsos.seek(1044480);fsos.write(buf,0,4096);
    fsos.seek(100000);fsos.write(buf,0,4096);
//    fsos.close();
    // 2) write cross blocks
    // from 1048000 -> 1049000
    for(i=0;i<4096;i++)buf[i]='2';
    fsos.seek(1048000);fsos.write(buf,0,1000);
    // from 2097000 to 3146000
    fsos.seek(2097000);
    for(int j=0;j<1049;j++)fsos.write(buf,0,1000);
    fsos.close();
  }

  void multitest(FileSystem fs, String path, int num)
  throws IOException{
	Path p = new Path(path);
	int flen = (int)fs.getFileStatus(new Path(path)).getLen();
        Random rand = new Random(System.currentTimeMillis());
	String [] buf = new String[num];
	int [] pos = new int[num];
	System.out.print("Preparing randome write info:"
			+ "\nfile = " + path
			+ "\nwriteSize = 256"
			+ "\ncount = " + num
			+ "\n...");
	for(int i=0;i<num;i++){
		byte tbuf[] = new byte[256];
		pos[i] = rand.nextInt(flen-256);
		rand.nextBytes(tbuf);
    	for(int j=0;j<256;j++)
    		tbuf[j] = (byte)(tbuf[j]%5+'5');
    	buf[i] = new String(tbuf);
	}
	System.out.print("...done"
			+ "\nPerforming test...");

	long tsStart = System.nanoTime();
    FSDataOutputStream fsos = fs.append(new Path(path));
    for(int i=0;i<num;i++){
    	fsos.seek(pos[i]);
    	if(buf[i].length()!=256)
    		System.out.println(buf[i].length());
    	fsos.writeBytes(buf[i]);
    }
    fsos.close();
	long tsEnd = System.nanoTime();

	System.out.println("...done");
	System.out.println("Total Time = " 
			+ (tsEnd-tsStart)/1000 + "." + (tsEnd-tsStart)%1000
			+ " microseconds");
  }

  void snapshot(FileSystem fs,String path, long msInt, int count)
  throws IOException{
    long st = JNIBlog.readLocalRTC();
    int curc = 0;
    while(curc < count){
      fs.createSnapshot(new Path(path));
      curc++;
      while(JNIBlog.readLocalRTC()<(st+curc*msInt)){
        try{Thread.sleep(1);}catch(InterruptedException ie){}
      }
    }
  }

  void read(FileSystem fs,String path)
  throws IOException{
    //read one
    read("R1",fs,path);
    //read two
    read("R2",fs,path);
  }

  void read(String tag,FileSystem fs,String path)
  throws IOException{
    long start_ts,end_ts;
    ByteBuffer bb = ByteBuffer.allocate(65536);
    FSDataInputStream fsis = fs.open(new Path(path));
    start_ts = System.nanoTime();
    while(fsis.read(bb)!=0)bb.clear();
    end_ts = System.nanoTime();
    fsis.close();
    System.out.println(tag+":"+(end_ts - start_ts));
  }

  void addTimestamp(long ts,byte[] buf){
    StringBuffer sb = new StringBuffer();
    sb.append(ts);
    sb.append(" ");
    byte bs[] = sb.toString().getBytes();
    System.arraycopy(bs,0,buf,0,bs.length);
  }

  void timewrite(FileSystem fs,String path,int bufsz, int dur)
  throws IOException{
    byte buf[] = new byte[bufsz];
    for(int i=0;i<bufsz;i++)buf[i]='P';
    buf[bufsz-1]='\n';
    FSDataOutputStream fsos = fs.create(new Path(path));
    long end = System.currentTimeMillis()+dur*1000;
    long cur = JNIBlog.readLocalRTC()+33;
    while(System.currentTimeMillis() < end){
      //write a packet
      if(JNIBlog.readLocalRTC() >= cur){
        addTimestamp(cur,buf);
        fsos.write(buf,0,bufsz);
        fsos.hflush();
        cur += 33;
      }
    }
    fsos.close();
  }

  void pmuwrite(FileSystem fs,String path,
    int pmuid, int recordsize, int dur)
  throws IOException{
    byte buf[] = new byte[recordsize];
    for(int i=0;i<recordsize;i++)buf[i]='P';
    buf[recordsize-1]='\n';
    FSDataOutputStream fsos = fs.create(new Path(path+"/pmu"+pmuid));
    long end = System.currentTimeMillis()+dur*1000;
    long cur = JNIBlog.readLocalRTC()+33;
    while(System.currentTimeMillis() < end){
      //write a packet
      if(JNIBlog.readLocalRTC() >= cur){
        addTimestamp(cur,buf);
        fsos.write(buf,0,recordsize);
        fsos.hflush();
        cur += 33;
      }
    }
    fsos.close();
  }

  private List<Long> getSnapshots(FileSystem fs)
  throws IOException{
    List<Long> lRet = new Vector<Long>(256);
    for(FileStatus stat: fs.listStatus(new Path("/.snapshot"))){
      Long snapts = Long.parseLong(stat.getPath().getName());
      lRet.add(snapts);
    }
    return lRet;
  }

  class FileTuple{
    String name; // file name
    long sts; // start time stamp
    long ets; // end time stamp
  }

  private long readFirstTs(FileSystem fs,Path path)
  throws IOException{
    FSDataInputStream fsis = fs.open(path);
    long lRet = -1;
    if(fsis.available()>13){
      byte buf[] = new byte[13];
      fsis.readFully(0,buf);
      lRet = Long.parseLong(new String(buf));
    }
    fsis.close();
    return lRet;
  }

  private long readLastTs(FileSystem fs,Path path)
  throws IOException{
    long lRet = -1;
    if(!fs.exists(path)) return -1;
    FSDataInputStream fsis = null;
    try{
      fsis = fs.open(path);
      int back = 64;
      int flen = fsis.available();
      if(flen > 0)
        while(true){
          int try_pos = Math.max(flen - back, 0);
          byte buf[] = new byte[flen - try_pos];
          fsis.readFully(try_pos,buf);
          if(buf[buf.length-1]=='\n')
            buf[buf.length-1]='P';
          String line = new String(buf);
          int pts = line.lastIndexOf('\n');
          if(pts == -1 && try_pos != 0)continue;
          if(pts != -1 && pts+14 <= line.length())
            lRet = Long.parseLong(line.substring(pts+1,pts+14));
           break;
        }
    }catch(IOException ioe){
      return -1;
    }finally{
      if(fsis!=null)fsis.close();
    }
    return lRet;
  }

  private List<FileTuple> getFiles(FileSystem fs, String path)
  throws IOException{
    List<FileTuple> lRet = new Vector<FileTuple>(32);
    for(FileStatus stat: fs.listStatus(new Path(path))){
      FileTuple ft = new FileTuple();
      ft.name = stat.getPath().getName();
      ft.sts = readFirstTs(fs,stat.getPath());
      ft.ets = readLastTs(fs,stat.getPath());
      lRet.add(ft);
    }
    return lRet;
  }

  void analyzesnap(FileSystem fs, String path)
  throws IOException{
    // STEP 1: get snapshot/timestamp list
    List<Long> lSnap = getSnapshots(fs);
    // STEP 2: get the real start/end timestamp for each file.
    List<FileTuple> lFile = getFiles(fs,path);
    // STEP 3: spit data
    for(long snap: lSnap){
      for(FileTuple ft: lFile){
        if(ft.sts > snap)continue;
        Path p = new Path("/.snapshot/"+snap+path+"/"+ft.name);
        long delta = snap - ft.sts;
        long ets = readLastTs(fs,p);

        if(ets!=-1){
          delta = snap - ets;
          if(snap > ft.ets){
            delta = ft.ets - ets;
            if(delta <= 0) continue;
          }
        }

        System.out.println(ft.name+" "+snap+" "+delta);
      }
    }
  }

  @Override
  public int run(String[] args) throws Exception{
    Configuration conf = this.getConf();
    FileSystem fs = FileSystem.get(conf);

    if(args.length < 1){
      System.out.println("args: <cmd:=append|overwrite>\n"+
        "\tappend <file> <data>\n"+
        "\toverwrite <file> <pos> <data>\n"+
        "\tmultitest <file> <num>\n"+
        "\twrite1g <file> <bfsz>\n"+ //set buffersize
        "\trandomwrite <file>\n"+ 
        "\tsnapshot <path> <interval_ms> <number>\n"+
        "\ttimewrite <path> <bfsz> <duration>\n"+
        "\tpmuwrite <path> <pmuid> <recordsize> <duration>\n"+
        "\tread <path>\n"+
        "\tanalyzesnap <path>\n"+
        "\tr105");
      return -1;
    }
    if("append".equals(args[0]))
      this.appendFile(fs,args[1],args[2]);
    else if("overwrite".equals(args[0]))
      this.overwriteFile(fs,args[1],args[2],args[3]);
    else if("multitest".equals(args[0]))
      this.multitest(fs,args[1],Integer.parseInt(args[2]));
    else if("write1g".equals(args[0]))
      this.write1g(fs,args[1],Integer.parseInt(args[2]));
    else if("randomwrite".equals(args[0]))
      this.randomWrite(fs,args[1]);
    else if("snapshot".equals(args[0]))
      this.snapshot(fs,args[1],Long.parseLong(args[2]),Integer.parseInt(args[3]));
    else if("read".equals(args[0]))
      this.read(fs,args[1]);
    else if("timewrite".equals(args[0]))
      this.timewrite(fs,args[1],Integer.parseInt(args[2]),Integer.parseInt(args[3]));
    else if("pmuwrite".equals(args[0]))
      this.pmuwrite(fs,args[1],Integer.parseInt(args[2]),Integer.parseInt(args[3]),Integer.parseInt(args[4]));
    else if("analyzesnap".equals(args[0]))
      this.analyzesnap(fs,args[1]);
    else
      throw new Exception("invalid command:"+args[0]);
    return 0;
  }
}
